// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: KickstartBuildService.proto
// </auto-generated>
#pragma warning disable 0414, 1591
#region Designer generated code

using grpc = global::Grpc.Core;

namespace Company.KickstartBuild.Services.Types {
  /// <summary>
  ///
  ///The Kickstart Build Service provides methods to build TFS Build Definitions, Builds, Release Definitions, and Releases
  /// </summary>
  public static partial class KickstartBuildService
  {
    static readonly string __ServiceName = "company.KickstartBuild.services.types.KickstartBuildService";

    static readonly grpc::Marshaller<global::Company.KickstartBuild.Services.Types.CreateReleaseDefinitionRequest> __Marshaller_company_KickstartBuild_services_types_CreateReleaseDefinitionRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Company.KickstartBuild.Services.Types.CreateReleaseDefinitionRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Company.KickstartBuild.Services.Types.CreateReleaseDefinitionResponse> __Marshaller_company_KickstartBuild_services_types_CreateReleaseDefinitionResponse = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Company.KickstartBuild.Services.Types.CreateReleaseDefinitionResponse.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Company.KickstartBuild.Services.Types.CreateReleaseRequest> __Marshaller_company_KickstartBuild_services_types_CreateReleaseRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Company.KickstartBuild.Services.Types.CreateReleaseRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Company.KickstartBuild.Services.Types.CreateReleaseResponse> __Marshaller_company_KickstartBuild_services_types_CreateReleaseResponse = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Company.KickstartBuild.Services.Types.CreateReleaseResponse.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Company.KickstartBuild.Services.Types.DeployReleaseRequest> __Marshaller_company_KickstartBuild_services_types_DeployReleaseRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Company.KickstartBuild.Services.Types.DeployReleaseRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Company.KickstartBuild.Services.Types.DeployReleaseResponse> __Marshaller_company_KickstartBuild_services_types_DeployReleaseResponse = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Company.KickstartBuild.Services.Types.DeployReleaseResponse.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Company.KickstartBuild.Services.Types.QueueBuildRequest> __Marshaller_company_KickstartBuild_services_types_QueueBuildRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Company.KickstartBuild.Services.Types.QueueBuildRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Company.KickstartBuild.Services.Types.QueueBuildResponse> __Marshaller_company_KickstartBuild_services_types_QueueBuildResponse = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Company.KickstartBuild.Services.Types.QueueBuildResponse.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Company.KickstartBuild.Services.Types.CreateBuildDefinitionRequest> __Marshaller_company_KickstartBuild_services_types_CreateBuildDefinitionRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Company.KickstartBuild.Services.Types.CreateBuildDefinitionRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Company.KickstartBuild.Services.Types.CreateBuildDefinitionResponse> __Marshaller_company_KickstartBuild_services_types_CreateBuildDefinitionResponse = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Company.KickstartBuild.Services.Types.CreateBuildDefinitionResponse.Parser.ParseFrom);

    static readonly grpc::Method<global::Company.KickstartBuild.Services.Types.CreateReleaseDefinitionRequest, global::Company.KickstartBuild.Services.Types.CreateReleaseDefinitionResponse> __Method_CreateReleaseDefinition = new grpc::Method<global::Company.KickstartBuild.Services.Types.CreateReleaseDefinitionRequest, global::Company.KickstartBuild.Services.Types.CreateReleaseDefinitionResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "CreateReleaseDefinition",
        __Marshaller_company_KickstartBuild_services_types_CreateReleaseDefinitionRequest,
        __Marshaller_company_KickstartBuild_services_types_CreateReleaseDefinitionResponse);

    static readonly grpc::Method<global::Company.KickstartBuild.Services.Types.CreateReleaseRequest, global::Company.KickstartBuild.Services.Types.CreateReleaseResponse> __Method_CreateRelease = new grpc::Method<global::Company.KickstartBuild.Services.Types.CreateReleaseRequest, global::Company.KickstartBuild.Services.Types.CreateReleaseResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "CreateRelease",
        __Marshaller_company_KickstartBuild_services_types_CreateReleaseRequest,
        __Marshaller_company_KickstartBuild_services_types_CreateReleaseResponse);

    static readonly grpc::Method<global::Company.KickstartBuild.Services.Types.DeployReleaseRequest, global::Company.KickstartBuild.Services.Types.DeployReleaseResponse> __Method_DeployRelease = new grpc::Method<global::Company.KickstartBuild.Services.Types.DeployReleaseRequest, global::Company.KickstartBuild.Services.Types.DeployReleaseResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "DeployRelease",
        __Marshaller_company_KickstartBuild_services_types_DeployReleaseRequest,
        __Marshaller_company_KickstartBuild_services_types_DeployReleaseResponse);

    static readonly grpc::Method<global::Company.KickstartBuild.Services.Types.QueueBuildRequest, global::Company.KickstartBuild.Services.Types.QueueBuildResponse> __Method_QueueBuild = new grpc::Method<global::Company.KickstartBuild.Services.Types.QueueBuildRequest, global::Company.KickstartBuild.Services.Types.QueueBuildResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "QueueBuild",
        __Marshaller_company_KickstartBuild_services_types_QueueBuildRequest,
        __Marshaller_company_KickstartBuild_services_types_QueueBuildResponse);

    static readonly grpc::Method<global::Company.KickstartBuild.Services.Types.CreateBuildDefinitionRequest, global::Company.KickstartBuild.Services.Types.CreateBuildDefinitionResponse> __Method_CreateBuildDefinition = new grpc::Method<global::Company.KickstartBuild.Services.Types.CreateBuildDefinitionRequest, global::Company.KickstartBuild.Services.Types.CreateBuildDefinitionResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "CreateBuildDefinition",
        __Marshaller_company_KickstartBuild_services_types_CreateBuildDefinitionRequest,
        __Marshaller_company_KickstartBuild_services_types_CreateBuildDefinitionResponse);

    /// <summary>Service descriptor</summary>
    public static global::Google.Protobuf.Reflection.ServiceDescriptor Descriptor
    {
      get { return global::Company.KickstartBuild.Services.Types.KickstartBuildServiceReflection.Descriptor.Services[0]; }
    }

    /// <summary>Base class for server-side implementations of KickstartBuildService</summary>
    public abstract partial class KickstartBuildServiceBase
    {
      public virtual global::System.Threading.Tasks.Task<global::Company.KickstartBuild.Services.Types.CreateReleaseDefinitionResponse> CreateReleaseDefinition(global::Company.KickstartBuild.Services.Types.CreateReleaseDefinitionRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task<global::Company.KickstartBuild.Services.Types.CreateReleaseResponse> CreateRelease(global::Company.KickstartBuild.Services.Types.CreateReleaseRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task<global::Company.KickstartBuild.Services.Types.DeployReleaseResponse> DeployRelease(global::Company.KickstartBuild.Services.Types.DeployReleaseRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task<global::Company.KickstartBuild.Services.Types.QueueBuildResponse> QueueBuild(global::Company.KickstartBuild.Services.Types.QueueBuildRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task<global::Company.KickstartBuild.Services.Types.CreateBuildDefinitionResponse> CreateBuildDefinition(global::Company.KickstartBuild.Services.Types.CreateBuildDefinitionRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

    }

    /// <summary>Client for KickstartBuildService</summary>
    public partial class KickstartBuildServiceClient : grpc::ClientBase<KickstartBuildServiceClient>
    {
      /// <summary>Creates a new client for KickstartBuildService</summary>
      /// <param name="channel">The channel to use to make remote calls.</param>
      public KickstartBuildServiceClient(grpc::Channel channel) : base(channel)
      {
      }
      /// <summary>Creates a new client for KickstartBuildService that uses a custom <c>CallInvoker</c>.</summary>
      /// <param name="callInvoker">The callInvoker to use to make remote calls.</param>
      public KickstartBuildServiceClient(grpc::CallInvoker callInvoker) : base(callInvoker)
      {
      }
      /// <summary>Protected parameterless constructor to allow creation of test doubles.</summary>
      protected KickstartBuildServiceClient() : base()
      {
      }
      /// <summary>Protected constructor to allow creation of configured clients.</summary>
      /// <param name="configuration">The client configuration.</param>
      protected KickstartBuildServiceClient(ClientBaseConfiguration configuration) : base(configuration)
      {
      }

      public virtual global::Company.KickstartBuild.Services.Types.CreateReleaseDefinitionResponse CreateReleaseDefinition(global::Company.KickstartBuild.Services.Types.CreateReleaseDefinitionRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return CreateReleaseDefinition(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::Company.KickstartBuild.Services.Types.CreateReleaseDefinitionResponse CreateReleaseDefinition(global::Company.KickstartBuild.Services.Types.CreateReleaseDefinitionRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_CreateReleaseDefinition, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::Company.KickstartBuild.Services.Types.CreateReleaseDefinitionResponse> CreateReleaseDefinitionAsync(global::Company.KickstartBuild.Services.Types.CreateReleaseDefinitionRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return CreateReleaseDefinitionAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::Company.KickstartBuild.Services.Types.CreateReleaseDefinitionResponse> CreateReleaseDefinitionAsync(global::Company.KickstartBuild.Services.Types.CreateReleaseDefinitionRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_CreateReleaseDefinition, null, options, request);
      }
      public virtual global::Company.KickstartBuild.Services.Types.CreateReleaseResponse CreateRelease(global::Company.KickstartBuild.Services.Types.CreateReleaseRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return CreateRelease(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::Company.KickstartBuild.Services.Types.CreateReleaseResponse CreateRelease(global::Company.KickstartBuild.Services.Types.CreateReleaseRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_CreateRelease, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::Company.KickstartBuild.Services.Types.CreateReleaseResponse> CreateReleaseAsync(global::Company.KickstartBuild.Services.Types.CreateReleaseRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return CreateReleaseAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::Company.KickstartBuild.Services.Types.CreateReleaseResponse> CreateReleaseAsync(global::Company.KickstartBuild.Services.Types.CreateReleaseRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_CreateRelease, null, options, request);
      }
      public virtual global::Company.KickstartBuild.Services.Types.DeployReleaseResponse DeployRelease(global::Company.KickstartBuild.Services.Types.DeployReleaseRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return DeployRelease(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::Company.KickstartBuild.Services.Types.DeployReleaseResponse DeployRelease(global::Company.KickstartBuild.Services.Types.DeployReleaseRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_DeployRelease, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::Company.KickstartBuild.Services.Types.DeployReleaseResponse> DeployReleaseAsync(global::Company.KickstartBuild.Services.Types.DeployReleaseRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return DeployReleaseAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::Company.KickstartBuild.Services.Types.DeployReleaseResponse> DeployReleaseAsync(global::Company.KickstartBuild.Services.Types.DeployReleaseRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_DeployRelease, null, options, request);
      }
      public virtual global::Company.KickstartBuild.Services.Types.QueueBuildResponse QueueBuild(global::Company.KickstartBuild.Services.Types.QueueBuildRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return QueueBuild(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::Company.KickstartBuild.Services.Types.QueueBuildResponse QueueBuild(global::Company.KickstartBuild.Services.Types.QueueBuildRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_QueueBuild, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::Company.KickstartBuild.Services.Types.QueueBuildResponse> QueueBuildAsync(global::Company.KickstartBuild.Services.Types.QueueBuildRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return QueueBuildAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::Company.KickstartBuild.Services.Types.QueueBuildResponse> QueueBuildAsync(global::Company.KickstartBuild.Services.Types.QueueBuildRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_QueueBuild, null, options, request);
      }
      public virtual global::Company.KickstartBuild.Services.Types.CreateBuildDefinitionResponse CreateBuildDefinition(global::Company.KickstartBuild.Services.Types.CreateBuildDefinitionRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return CreateBuildDefinition(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::Company.KickstartBuild.Services.Types.CreateBuildDefinitionResponse CreateBuildDefinition(global::Company.KickstartBuild.Services.Types.CreateBuildDefinitionRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_CreateBuildDefinition, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::Company.KickstartBuild.Services.Types.CreateBuildDefinitionResponse> CreateBuildDefinitionAsync(global::Company.KickstartBuild.Services.Types.CreateBuildDefinitionRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return CreateBuildDefinitionAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::Company.KickstartBuild.Services.Types.CreateBuildDefinitionResponse> CreateBuildDefinitionAsync(global::Company.KickstartBuild.Services.Types.CreateBuildDefinitionRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_CreateBuildDefinition, null, options, request);
      }
      /// <summary>Creates a new instance of client from given <c>ClientBaseConfiguration</c>.</summary>
      protected override KickstartBuildServiceClient NewInstance(ClientBaseConfiguration configuration)
      {
        return new KickstartBuildServiceClient(configuration);
      }
    }

    /// <summary>Creates service definition that can be registered with a server</summary>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    public static grpc::ServerServiceDefinition BindService(KickstartBuildServiceBase serviceImpl)
    {
      return grpc::ServerServiceDefinition.CreateBuilder()
          .AddMethod(__Method_CreateReleaseDefinition, serviceImpl.CreateReleaseDefinition)
          .AddMethod(__Method_CreateRelease, serviceImpl.CreateRelease)
          .AddMethod(__Method_DeployRelease, serviceImpl.DeployRelease)
          .AddMethod(__Method_QueueBuild, serviceImpl.QueueBuild)
          .AddMethod(__Method_CreateBuildDefinition, serviceImpl.CreateBuildDefinition).Build();
    }

    /// <summary>Register service method implementations with a service binder. Useful when customizing the service binding logic.
    /// Note: this method is part of an experimental API that can change or be removed without any prior notice.</summary>
    /// <param name="serviceBinder">Service methods will be bound by calling <c>AddMethod</c> on this object.</param>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    public static void BindService(grpc::ServiceBinderBase serviceBinder, KickstartBuildServiceBase serviceImpl)
    {
      serviceBinder.AddMethod(__Method_CreateReleaseDefinition, serviceImpl.CreateReleaseDefinition);
      serviceBinder.AddMethod(__Method_CreateRelease, serviceImpl.CreateRelease);
      serviceBinder.AddMethod(__Method_DeployRelease, serviceImpl.DeployRelease);
      serviceBinder.AddMethod(__Method_QueueBuild, serviceImpl.QueueBuild);
      serviceBinder.AddMethod(__Method_CreateBuildDefinition, serviceImpl.CreateBuildDefinition);
    }

  }
}
#endregion
