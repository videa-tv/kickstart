// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: KickstartService.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Kickstart.Services.Types {

  /// <summary>Holder for reflection information generated from KickstartService.proto</summary>
  public static partial class KickstartServiceReflection {

    #region Descriptor
    /// <summary>File descriptor for KickstartService.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static KickstartServiceReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "ChZLaWNrc3RhcnRTZXJ2aWNlLnByb3RvEhhraWNrc3RhcnQuc2VydmljZXMu",
            "dHlwZXMaIGdvb2dsZS9wcm90b2J1Zi9kZXNjcmlwdG9yLnByb3RvIiwKGlF1",
            "ZXJ5RGF0YWJhc2VUYWJsZXNSZXF1ZXN0Eg4KBnNjaGVtYRgBIAEoCSJWChtR",
            "dWVyeURhdGFiYXNlVGFibGVzUmVzcG9uc2USNwoGdGFibGVzGAEgAygLMicu",
            "a2lja3N0YXJ0LnNlcnZpY2VzLnR5cGVzLkRhdGFiYXNlVGFibGUicwoNRGF0",
            "YWJhc2VUYWJsZRITCgtzY2hlbWFfbmFtZRgBIAEoCRISCgp0YWJsZV9uYW1l",
            "GAIgASgJEjkKB2NvbHVtbnMYAyADKAsyKC5raWNrc3RhcnQuc2VydmljZXMu",
            "dHlwZXMuRGF0YWJhc2VDb2x1bW4ibAoORGF0YWJhc2VDb2x1bW4SEwoLY29s",
            "dW1uX25hbWUYASABKAkSRQoMZm9yZWlnbl9rZXlzGAIgAygLMi8ua2lja3N0",
            "YXJ0LnNlcnZpY2VzLnR5cGVzLkRhdGFiYXNlRm9yZWlnbkNvbHVtbiJVChVE",
            "YXRhYmFzZUZvcmVpZ25Db2x1bW4SEwoLc2NoZW1hX25hbWUYASABKAkSEgoK",
            "dGFibGVfbmFtZRgCIAEoCRITCgtjb2x1bW5fbmFtZRgDIAEoCSK3BAoYS2lj",
            "a3N0YXJ0U29sdXRpb25SZXF1ZXN0ElYKDERhdGFiYXNlVHlwZRgBIAEoDjJA",
            "LmtpY2tzdGFydC5zZXJ2aWNlcy50eXBlcy5LaWNrc3RhcnRTb2x1dGlvblJl",
            "cXVlc3QuRGF0YWJhc2VUeXBlcxIfChdHZW5lcmF0ZURhdGFiYXNlUHJvamVj",
            "dBgCIAEoCBIgChhHZW5lcmF0ZURhdGFMYXllclByb2plY3QYAyABKAgSIgoa",
            "R2VuZXJhdGVHcnBjU2VydmljZVByb2plY3QYBCABKAgSIwobR2VuZXJhdGVH",
            "cnBjVW5pdFRlc3RQcm9qZWN0GAUgASgIEiEKGUdlbmVyYXRlR3JwY0NsaWVu",
            "dFByb2plY3QYBiABKAgSHQoVR2VuZXJhdGVXZWJBcHBQcm9qZWN0GAcgASgI",
            "EiQKHEdlbmVyYXRlRG9ja2VyQ29tcG9zZVByb2plY3QYCCABKAgSEwoLQ29t",
            "cGFueU5hbWUYCSABKAkSFAoMU29sdXRpb25OYW1lGAogASgJEhMKC1Byb2pl",
            "Y3ROYW1lGAsgASgJEhUKDVByb3RvRmlsZVRleHQYDCABKAkSGgoSQ29udmVy",
            "dFRvU25ha2VDYXNlGA0gASgIIlwKDURhdGFiYXNlVHlwZXMSCwoHVW5rbm93",
            "bhAAEgwKCFBvc3RncmVzEAESDQoJU3FsU2VydmVyEAISCQoFTXlTcWwQAxIL",
            "CgdLaW5lc2lzEAQSCQoFS2Fma2EQBSJiChlLaWNrc3RhcnRTb2x1dGlvblJl",
            "c3BvbnNlEhEKCVN1Y2NlZWRlZBgBIAEoCBIUCgxFcnJvck1lc3NhZ2UYAiAB",
            "KAkSHAoUR2VuZXJhdGVkRmlsZXNCYXNlNjQYAyABKAki0wEKEUNvbnZlcnRE",
            "RExSZXF1ZXN0Ej0KDERhdGFiYXNlVHlwZRgBIAEoDjInLmtpY2tzdGFydC5z",
            "ZXJ2aWNlcy50eXBlcy5EYXRhYmFzZVR5cGVzEhoKEkNvbnZlcnRUb1NuYWtl",
            "Q2FzZRgCIAEoCBIbChNVbmNvbnZlcnRlZFRhYmxlRERMGAMgASgJEh8KF1Vu",
            "Y29udmVydGVkVGFibGVUeXBlRERMGAQgASgJEiUKHVVuY29udmVydGVkU3Rv",
            "cmVkUHJvY2VkdXJlRERMGAUgASgJIqIBChJDb252ZXJ0RERMUmVzcG9uc2US",
            "GQoRQ29udmVydGVkVGFibGVEREwYASABKAkSHQoVQ29udmVydGVkVGFibGVU",
            "eXBlRERMGAIgASgJEiMKG0NvbnZlcnRlZFN0b3JlZFByb2NlZHVyZURETBgD",
            "IAEoCRIYChBDb252ZXJ0ZWREbXNKc29uGAQgASgJEhMKC1ppcEFzQmFzZTY0",
            "GAUgASgJIt0BCg9TcGxpdERETFJlcXVlc3QSPQoMRGF0YWJhc2VUeXBlGAEg",
            "ASgOMicua2lja3N0YXJ0LnNlcnZpY2VzLnR5cGVzLkRhdGFiYXNlVHlwZXMS",
            "FwoPVW5TcGxpdFRhYmxlRERMGAIgASgJEhsKE1VuU3BsaXRUYWJsZVR5cGVE",
            "REwYAyABKAkSFgoOVW5TcGxpdFZpZXdEREwYBCABKAkSGgoSVW5TcGxpdEZ1",
            "bmN0aW9uRERMGAUgASgJEiEKGVVuU3BsaXRTdG9yZWRQcm9jZWR1cmVEREwY",
            "BiABKAkiJwoQU3BsaXRERExSZXNwb25zZRITCgtaaXBBc0Jhc2U2NBgBIAEo",
            "CSpECg1EYXRhYmFzZVR5cGVzEgsKB1Vua25vd24QABIMCghQb3N0Z3JlcxAB",
            "Eg0KCVNxbFNlcnZlchACEgkKBU15U3FsEAMy5AMKE0tpY2tzdGFydFNlcnZp",
            "Y2VBcGkSfAoRS2lja3N0YXJ0U29sdXRpb24SMi5raWNrc3RhcnQuc2Vydmlj",
            "ZXMudHlwZXMuS2lja3N0YXJ0U29sdXRpb25SZXF1ZXN0GjMua2lja3N0YXJ0",
            "LnNlcnZpY2VzLnR5cGVzLktpY2tzdGFydFNvbHV0aW9uUmVzcG9uc2USZwoK",
            "Q29udmVydERETBIrLmtpY2tzdGFydC5zZXJ2aWNlcy50eXBlcy5Db252ZXJ0",
            "RERMUmVxdWVzdBosLmtpY2tzdGFydC5zZXJ2aWNlcy50eXBlcy5Db252ZXJ0",
            "RERMUmVzcG9uc2USYQoIU3BsaXREREwSKS5raWNrc3RhcnQuc2VydmljZXMu",
            "dHlwZXMuU3BsaXRERExSZXF1ZXN0Gioua2lja3N0YXJ0LnNlcnZpY2VzLnR5",
            "cGVzLlNwbGl0RERMUmVzcG9uc2USggEKE1F1ZXJ5RGF0YWJhc2VUYWJsZXMS",
            "NC5raWNrc3RhcnQuc2VydmljZXMudHlwZXMuUXVlcnlEYXRhYmFzZVRhYmxl",
            "c1JlcXVlc3QaNS5raWNrc3RhcnQuc2VydmljZXMudHlwZXMuUXVlcnlEYXRh",
            "YmFzZVRhYmxlc1Jlc3BvbnNlOi8KB3ZlcnNpb24SHC5nb29nbGUucHJvdG9i",
            "dWYuRmlsZU9wdGlvbnMY0IYDIAEoCUIkqgIYS2lja3N0YXJ0LlNlcnZpY2Vz",
            "LlR5cGVzgrUYBTEuMC4wYgZwcm90bzM="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { pbr::FileDescriptor.DescriptorProtoFileDescriptor, },
          new pbr::GeneratedClrTypeInfo(new[] {typeof(global::Kickstart.Services.Types.DatabaseTypes), }, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Kickstart.Services.Types.QueryDatabaseTablesRequest), global::Kickstart.Services.Types.QueryDatabaseTablesRequest.Parser, new[]{ "Schema" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Kickstart.Services.Types.QueryDatabaseTablesResponse), global::Kickstart.Services.Types.QueryDatabaseTablesResponse.Parser, new[]{ "Tables" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Kickstart.Services.Types.DatabaseTable), global::Kickstart.Services.Types.DatabaseTable.Parser, new[]{ "SchemaName", "TableName", "Columns" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Kickstart.Services.Types.DatabaseColumn), global::Kickstart.Services.Types.DatabaseColumn.Parser, new[]{ "ColumnName", "ForeignKeys" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Kickstart.Services.Types.DatabaseForeignColumn), global::Kickstart.Services.Types.DatabaseForeignColumn.Parser, new[]{ "SchemaName", "TableName", "ColumnName" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Kickstart.Services.Types.KickstartSolutionRequest), global::Kickstart.Services.Types.KickstartSolutionRequest.Parser, new[]{ "DatabaseType", "GenerateDatabaseProject", "GenerateDataLayerProject", "GenerateGrpcServiceProject", "GenerateGrpcUnitTestProject", "GenerateGrpcClientProject", "GenerateWebAppProject", "GenerateDockerComposeProject", "CompanyName", "SolutionName", "ProjectName", "ProtoFileText", "ConvertToSnakeCase" }, null, new[]{ typeof(global::Kickstart.Services.Types.KickstartSolutionRequest.Types.DatabaseTypes) }, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Kickstart.Services.Types.KickstartSolutionResponse), global::Kickstart.Services.Types.KickstartSolutionResponse.Parser, new[]{ "Succeeded", "ErrorMessage", "GeneratedFilesBase64" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Kickstart.Services.Types.ConvertDDLRequest), global::Kickstart.Services.Types.ConvertDDLRequest.Parser, new[]{ "DatabaseType", "ConvertToSnakeCase", "UnconvertedTableDDL", "UnconvertedTableTypeDDL", "UnconvertedStoredProcedureDDL" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Kickstart.Services.Types.ConvertDDLResponse), global::Kickstart.Services.Types.ConvertDDLResponse.Parser, new[]{ "ConvertedTableDDL", "ConvertedTableTypeDDL", "ConvertedStoredProcedureDDL", "ConvertedDmsJson", "ZipAsBase64" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Kickstart.Services.Types.SplitDDLRequest), global::Kickstart.Services.Types.SplitDDLRequest.Parser, new[]{ "DatabaseType", "UnSplitTableDDL", "UnSplitTableTypeDDL", "UnSplitViewDDL", "UnSplitFunctionDDL", "UnSplitStoredProcedureDDL" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Kickstart.Services.Types.SplitDDLResponse), global::Kickstart.Services.Types.SplitDDLResponse.Parser, new[]{ "ZipAsBase64" }, null, null, null)
          }));
    }
    #endregion

  }
  #region Enums
  public enum DatabaseTypes {
    [pbr::OriginalName("Unknown")] Unknown = 0,
    [pbr::OriginalName("Postgres")] Postgres = 1,
    [pbr::OriginalName("SqlServer")] SqlServer = 2,
    [pbr::OriginalName("MySql")] MySql = 3,
  }

  #endregion

  #region Messages
  public sealed partial class QueryDatabaseTablesRequest : pb::IMessage<QueryDatabaseTablesRequest> {
    private static readonly pb::MessageParser<QueryDatabaseTablesRequest> _parser = new pb::MessageParser<QueryDatabaseTablesRequest>(() => new QueryDatabaseTablesRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<QueryDatabaseTablesRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Kickstart.Services.Types.KickstartServiceReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public QueryDatabaseTablesRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public QueryDatabaseTablesRequest(QueryDatabaseTablesRequest other) : this() {
      schema_ = other.schema_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public QueryDatabaseTablesRequest Clone() {
      return new QueryDatabaseTablesRequest(this);
    }

    /// <summary>Field number for the "schema" field.</summary>
    public const int SchemaFieldNumber = 1;
    private string schema_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Schema {
      get { return schema_; }
      set {
        schema_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as QueryDatabaseTablesRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(QueryDatabaseTablesRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Schema != other.Schema) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Schema.Length != 0) hash ^= Schema.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Schema.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Schema);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Schema.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Schema);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(QueryDatabaseTablesRequest other) {
      if (other == null) {
        return;
      }
      if (other.Schema.Length != 0) {
        Schema = other.Schema;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Schema = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class QueryDatabaseTablesResponse : pb::IMessage<QueryDatabaseTablesResponse> {
    private static readonly pb::MessageParser<QueryDatabaseTablesResponse> _parser = new pb::MessageParser<QueryDatabaseTablesResponse>(() => new QueryDatabaseTablesResponse());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<QueryDatabaseTablesResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Kickstart.Services.Types.KickstartServiceReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public QueryDatabaseTablesResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public QueryDatabaseTablesResponse(QueryDatabaseTablesResponse other) : this() {
      tables_ = other.tables_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public QueryDatabaseTablesResponse Clone() {
      return new QueryDatabaseTablesResponse(this);
    }

    /// <summary>Field number for the "tables" field.</summary>
    public const int TablesFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Kickstart.Services.Types.DatabaseTable> _repeated_tables_codec
        = pb::FieldCodec.ForMessage(10, global::Kickstart.Services.Types.DatabaseTable.Parser);
    private readonly pbc::RepeatedField<global::Kickstart.Services.Types.DatabaseTable> tables_ = new pbc::RepeatedField<global::Kickstart.Services.Types.DatabaseTable>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Kickstart.Services.Types.DatabaseTable> Tables {
      get { return tables_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as QueryDatabaseTablesResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(QueryDatabaseTablesResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!tables_.Equals(other.tables_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= tables_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      tables_.WriteTo(output, _repeated_tables_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += tables_.CalculateSize(_repeated_tables_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(QueryDatabaseTablesResponse other) {
      if (other == null) {
        return;
      }
      tables_.Add(other.tables_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            tables_.AddEntriesFrom(input, _repeated_tables_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class DatabaseTable : pb::IMessage<DatabaseTable> {
    private static readonly pb::MessageParser<DatabaseTable> _parser = new pb::MessageParser<DatabaseTable>(() => new DatabaseTable());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<DatabaseTable> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Kickstart.Services.Types.KickstartServiceReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DatabaseTable() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DatabaseTable(DatabaseTable other) : this() {
      schemaName_ = other.schemaName_;
      tableName_ = other.tableName_;
      columns_ = other.columns_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DatabaseTable Clone() {
      return new DatabaseTable(this);
    }

    /// <summary>Field number for the "schema_name" field.</summary>
    public const int SchemaNameFieldNumber = 1;
    private string schemaName_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string SchemaName {
      get { return schemaName_; }
      set {
        schemaName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "table_name" field.</summary>
    public const int TableNameFieldNumber = 2;
    private string tableName_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string TableName {
      get { return tableName_; }
      set {
        tableName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "columns" field.</summary>
    public const int ColumnsFieldNumber = 3;
    private static readonly pb::FieldCodec<global::Kickstart.Services.Types.DatabaseColumn> _repeated_columns_codec
        = pb::FieldCodec.ForMessage(26, global::Kickstart.Services.Types.DatabaseColumn.Parser);
    private readonly pbc::RepeatedField<global::Kickstart.Services.Types.DatabaseColumn> columns_ = new pbc::RepeatedField<global::Kickstart.Services.Types.DatabaseColumn>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Kickstart.Services.Types.DatabaseColumn> Columns {
      get { return columns_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as DatabaseTable);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(DatabaseTable other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (SchemaName != other.SchemaName) return false;
      if (TableName != other.TableName) return false;
      if(!columns_.Equals(other.columns_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (SchemaName.Length != 0) hash ^= SchemaName.GetHashCode();
      if (TableName.Length != 0) hash ^= TableName.GetHashCode();
      hash ^= columns_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (SchemaName.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(SchemaName);
      }
      if (TableName.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(TableName);
      }
      columns_.WriteTo(output, _repeated_columns_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (SchemaName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(SchemaName);
      }
      if (TableName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(TableName);
      }
      size += columns_.CalculateSize(_repeated_columns_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(DatabaseTable other) {
      if (other == null) {
        return;
      }
      if (other.SchemaName.Length != 0) {
        SchemaName = other.SchemaName;
      }
      if (other.TableName.Length != 0) {
        TableName = other.TableName;
      }
      columns_.Add(other.columns_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            SchemaName = input.ReadString();
            break;
          }
          case 18: {
            TableName = input.ReadString();
            break;
          }
          case 26: {
            columns_.AddEntriesFrom(input, _repeated_columns_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class DatabaseColumn : pb::IMessage<DatabaseColumn> {
    private static readonly pb::MessageParser<DatabaseColumn> _parser = new pb::MessageParser<DatabaseColumn>(() => new DatabaseColumn());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<DatabaseColumn> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Kickstart.Services.Types.KickstartServiceReflection.Descriptor.MessageTypes[3]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DatabaseColumn() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DatabaseColumn(DatabaseColumn other) : this() {
      columnName_ = other.columnName_;
      foreignKeys_ = other.foreignKeys_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DatabaseColumn Clone() {
      return new DatabaseColumn(this);
    }

    /// <summary>Field number for the "column_name" field.</summary>
    public const int ColumnNameFieldNumber = 1;
    private string columnName_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ColumnName {
      get { return columnName_; }
      set {
        columnName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "foreign_keys" field.</summary>
    public const int ForeignKeysFieldNumber = 2;
    private static readonly pb::FieldCodec<global::Kickstart.Services.Types.DatabaseForeignColumn> _repeated_foreignKeys_codec
        = pb::FieldCodec.ForMessage(18, global::Kickstart.Services.Types.DatabaseForeignColumn.Parser);
    private readonly pbc::RepeatedField<global::Kickstart.Services.Types.DatabaseForeignColumn> foreignKeys_ = new pbc::RepeatedField<global::Kickstart.Services.Types.DatabaseForeignColumn>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Kickstart.Services.Types.DatabaseForeignColumn> ForeignKeys {
      get { return foreignKeys_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as DatabaseColumn);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(DatabaseColumn other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ColumnName != other.ColumnName) return false;
      if(!foreignKeys_.Equals(other.foreignKeys_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (ColumnName.Length != 0) hash ^= ColumnName.GetHashCode();
      hash ^= foreignKeys_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ColumnName.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(ColumnName);
      }
      foreignKeys_.WriteTo(output, _repeated_foreignKeys_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ColumnName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ColumnName);
      }
      size += foreignKeys_.CalculateSize(_repeated_foreignKeys_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(DatabaseColumn other) {
      if (other == null) {
        return;
      }
      if (other.ColumnName.Length != 0) {
        ColumnName = other.ColumnName;
      }
      foreignKeys_.Add(other.foreignKeys_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            ColumnName = input.ReadString();
            break;
          }
          case 18: {
            foreignKeys_.AddEntriesFrom(input, _repeated_foreignKeys_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class DatabaseForeignColumn : pb::IMessage<DatabaseForeignColumn> {
    private static readonly pb::MessageParser<DatabaseForeignColumn> _parser = new pb::MessageParser<DatabaseForeignColumn>(() => new DatabaseForeignColumn());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<DatabaseForeignColumn> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Kickstart.Services.Types.KickstartServiceReflection.Descriptor.MessageTypes[4]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DatabaseForeignColumn() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DatabaseForeignColumn(DatabaseForeignColumn other) : this() {
      schemaName_ = other.schemaName_;
      tableName_ = other.tableName_;
      columnName_ = other.columnName_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DatabaseForeignColumn Clone() {
      return new DatabaseForeignColumn(this);
    }

    /// <summary>Field number for the "schema_name" field.</summary>
    public const int SchemaNameFieldNumber = 1;
    private string schemaName_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string SchemaName {
      get { return schemaName_; }
      set {
        schemaName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "table_name" field.</summary>
    public const int TableNameFieldNumber = 2;
    private string tableName_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string TableName {
      get { return tableName_; }
      set {
        tableName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "column_name" field.</summary>
    public const int ColumnNameFieldNumber = 3;
    private string columnName_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ColumnName {
      get { return columnName_; }
      set {
        columnName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as DatabaseForeignColumn);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(DatabaseForeignColumn other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (SchemaName != other.SchemaName) return false;
      if (TableName != other.TableName) return false;
      if (ColumnName != other.ColumnName) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (SchemaName.Length != 0) hash ^= SchemaName.GetHashCode();
      if (TableName.Length != 0) hash ^= TableName.GetHashCode();
      if (ColumnName.Length != 0) hash ^= ColumnName.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (SchemaName.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(SchemaName);
      }
      if (TableName.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(TableName);
      }
      if (ColumnName.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(ColumnName);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (SchemaName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(SchemaName);
      }
      if (TableName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(TableName);
      }
      if (ColumnName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ColumnName);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(DatabaseForeignColumn other) {
      if (other == null) {
        return;
      }
      if (other.SchemaName.Length != 0) {
        SchemaName = other.SchemaName;
      }
      if (other.TableName.Length != 0) {
        TableName = other.TableName;
      }
      if (other.ColumnName.Length != 0) {
        ColumnName = other.ColumnName;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            SchemaName = input.ReadString();
            break;
          }
          case 18: {
            TableName = input.ReadString();
            break;
          }
          case 26: {
            ColumnName = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class KickstartSolutionRequest : pb::IMessage<KickstartSolutionRequest> {
    private static readonly pb::MessageParser<KickstartSolutionRequest> _parser = new pb::MessageParser<KickstartSolutionRequest>(() => new KickstartSolutionRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<KickstartSolutionRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Kickstart.Services.Types.KickstartServiceReflection.Descriptor.MessageTypes[5]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public KickstartSolutionRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public KickstartSolutionRequest(KickstartSolutionRequest other) : this() {
      databaseType_ = other.databaseType_;
      generateDatabaseProject_ = other.generateDatabaseProject_;
      generateDataLayerProject_ = other.generateDataLayerProject_;
      generateGrpcServiceProject_ = other.generateGrpcServiceProject_;
      generateGrpcUnitTestProject_ = other.generateGrpcUnitTestProject_;
      generateGrpcClientProject_ = other.generateGrpcClientProject_;
      generateWebAppProject_ = other.generateWebAppProject_;
      generateDockerComposeProject_ = other.generateDockerComposeProject_;
      companyName_ = other.companyName_;
      solutionName_ = other.solutionName_;
      projectName_ = other.projectName_;
      protoFileText_ = other.protoFileText_;
      convertToSnakeCase_ = other.convertToSnakeCase_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public KickstartSolutionRequest Clone() {
      return new KickstartSolutionRequest(this);
    }

    /// <summary>Field number for the "DatabaseType" field.</summary>
    public const int DatabaseTypeFieldNumber = 1;
    private global::Kickstart.Services.Types.KickstartSolutionRequest.Types.DatabaseTypes databaseType_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Kickstart.Services.Types.KickstartSolutionRequest.Types.DatabaseTypes DatabaseType {
      get { return databaseType_; }
      set {
        databaseType_ = value;
      }
    }

    /// <summary>Field number for the "GenerateDatabaseProject" field.</summary>
    public const int GenerateDatabaseProjectFieldNumber = 2;
    private bool generateDatabaseProject_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool GenerateDatabaseProject {
      get { return generateDatabaseProject_; }
      set {
        generateDatabaseProject_ = value;
      }
    }

    /// <summary>Field number for the "GenerateDataLayerProject" field.</summary>
    public const int GenerateDataLayerProjectFieldNumber = 3;
    private bool generateDataLayerProject_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool GenerateDataLayerProject {
      get { return generateDataLayerProject_; }
      set {
        generateDataLayerProject_ = value;
      }
    }

    /// <summary>Field number for the "GenerateGrpcServiceProject" field.</summary>
    public const int GenerateGrpcServiceProjectFieldNumber = 4;
    private bool generateGrpcServiceProject_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool GenerateGrpcServiceProject {
      get { return generateGrpcServiceProject_; }
      set {
        generateGrpcServiceProject_ = value;
      }
    }

    /// <summary>Field number for the "GenerateGrpcUnitTestProject" field.</summary>
    public const int GenerateGrpcUnitTestProjectFieldNumber = 5;
    private bool generateGrpcUnitTestProject_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool GenerateGrpcUnitTestProject {
      get { return generateGrpcUnitTestProject_; }
      set {
        generateGrpcUnitTestProject_ = value;
      }
    }

    /// <summary>Field number for the "GenerateGrpcClientProject" field.</summary>
    public const int GenerateGrpcClientProjectFieldNumber = 6;
    private bool generateGrpcClientProject_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool GenerateGrpcClientProject {
      get { return generateGrpcClientProject_; }
      set {
        generateGrpcClientProject_ = value;
      }
    }

    /// <summary>Field number for the "GenerateWebAppProject" field.</summary>
    public const int GenerateWebAppProjectFieldNumber = 7;
    private bool generateWebAppProject_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool GenerateWebAppProject {
      get { return generateWebAppProject_; }
      set {
        generateWebAppProject_ = value;
      }
    }

    /// <summary>Field number for the "GenerateDockerComposeProject" field.</summary>
    public const int GenerateDockerComposeProjectFieldNumber = 8;
    private bool generateDockerComposeProject_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool GenerateDockerComposeProject {
      get { return generateDockerComposeProject_; }
      set {
        generateDockerComposeProject_ = value;
      }
    }

    /// <summary>Field number for the "CompanyName" field.</summary>
    public const int CompanyNameFieldNumber = 9;
    private string companyName_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string CompanyName {
      get { return companyName_; }
      set {
        companyName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "SolutionName" field.</summary>
    public const int SolutionNameFieldNumber = 10;
    private string solutionName_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string SolutionName {
      get { return solutionName_; }
      set {
        solutionName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "ProjectName" field.</summary>
    public const int ProjectNameFieldNumber = 11;
    private string projectName_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ProjectName {
      get { return projectName_; }
      set {
        projectName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "ProtoFileText" field.</summary>
    public const int ProtoFileTextFieldNumber = 12;
    private string protoFileText_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ProtoFileText {
      get { return protoFileText_; }
      set {
        protoFileText_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "ConvertToSnakeCase" field.</summary>
    public const int ConvertToSnakeCaseFieldNumber = 13;
    private bool convertToSnakeCase_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool ConvertToSnakeCase {
      get { return convertToSnakeCase_; }
      set {
        convertToSnakeCase_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as KickstartSolutionRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(KickstartSolutionRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (DatabaseType != other.DatabaseType) return false;
      if (GenerateDatabaseProject != other.GenerateDatabaseProject) return false;
      if (GenerateDataLayerProject != other.GenerateDataLayerProject) return false;
      if (GenerateGrpcServiceProject != other.GenerateGrpcServiceProject) return false;
      if (GenerateGrpcUnitTestProject != other.GenerateGrpcUnitTestProject) return false;
      if (GenerateGrpcClientProject != other.GenerateGrpcClientProject) return false;
      if (GenerateWebAppProject != other.GenerateWebAppProject) return false;
      if (GenerateDockerComposeProject != other.GenerateDockerComposeProject) return false;
      if (CompanyName != other.CompanyName) return false;
      if (SolutionName != other.SolutionName) return false;
      if (ProjectName != other.ProjectName) return false;
      if (ProtoFileText != other.ProtoFileText) return false;
      if (ConvertToSnakeCase != other.ConvertToSnakeCase) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (DatabaseType != 0) hash ^= DatabaseType.GetHashCode();
      if (GenerateDatabaseProject != false) hash ^= GenerateDatabaseProject.GetHashCode();
      if (GenerateDataLayerProject != false) hash ^= GenerateDataLayerProject.GetHashCode();
      if (GenerateGrpcServiceProject != false) hash ^= GenerateGrpcServiceProject.GetHashCode();
      if (GenerateGrpcUnitTestProject != false) hash ^= GenerateGrpcUnitTestProject.GetHashCode();
      if (GenerateGrpcClientProject != false) hash ^= GenerateGrpcClientProject.GetHashCode();
      if (GenerateWebAppProject != false) hash ^= GenerateWebAppProject.GetHashCode();
      if (GenerateDockerComposeProject != false) hash ^= GenerateDockerComposeProject.GetHashCode();
      if (CompanyName.Length != 0) hash ^= CompanyName.GetHashCode();
      if (SolutionName.Length != 0) hash ^= SolutionName.GetHashCode();
      if (ProjectName.Length != 0) hash ^= ProjectName.GetHashCode();
      if (ProtoFileText.Length != 0) hash ^= ProtoFileText.GetHashCode();
      if (ConvertToSnakeCase != false) hash ^= ConvertToSnakeCase.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (DatabaseType != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) DatabaseType);
      }
      if (GenerateDatabaseProject != false) {
        output.WriteRawTag(16);
        output.WriteBool(GenerateDatabaseProject);
      }
      if (GenerateDataLayerProject != false) {
        output.WriteRawTag(24);
        output.WriteBool(GenerateDataLayerProject);
      }
      if (GenerateGrpcServiceProject != false) {
        output.WriteRawTag(32);
        output.WriteBool(GenerateGrpcServiceProject);
      }
      if (GenerateGrpcUnitTestProject != false) {
        output.WriteRawTag(40);
        output.WriteBool(GenerateGrpcUnitTestProject);
      }
      if (GenerateGrpcClientProject != false) {
        output.WriteRawTag(48);
        output.WriteBool(GenerateGrpcClientProject);
      }
      if (GenerateWebAppProject != false) {
        output.WriteRawTag(56);
        output.WriteBool(GenerateWebAppProject);
      }
      if (GenerateDockerComposeProject != false) {
        output.WriteRawTag(64);
        output.WriteBool(GenerateDockerComposeProject);
      }
      if (CompanyName.Length != 0) {
        output.WriteRawTag(74);
        output.WriteString(CompanyName);
      }
      if (SolutionName.Length != 0) {
        output.WriteRawTag(82);
        output.WriteString(SolutionName);
      }
      if (ProjectName.Length != 0) {
        output.WriteRawTag(90);
        output.WriteString(ProjectName);
      }
      if (ProtoFileText.Length != 0) {
        output.WriteRawTag(98);
        output.WriteString(ProtoFileText);
      }
      if (ConvertToSnakeCase != false) {
        output.WriteRawTag(104);
        output.WriteBool(ConvertToSnakeCase);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (DatabaseType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) DatabaseType);
      }
      if (GenerateDatabaseProject != false) {
        size += 1 + 1;
      }
      if (GenerateDataLayerProject != false) {
        size += 1 + 1;
      }
      if (GenerateGrpcServiceProject != false) {
        size += 1 + 1;
      }
      if (GenerateGrpcUnitTestProject != false) {
        size += 1 + 1;
      }
      if (GenerateGrpcClientProject != false) {
        size += 1 + 1;
      }
      if (GenerateWebAppProject != false) {
        size += 1 + 1;
      }
      if (GenerateDockerComposeProject != false) {
        size += 1 + 1;
      }
      if (CompanyName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(CompanyName);
      }
      if (SolutionName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(SolutionName);
      }
      if (ProjectName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ProjectName);
      }
      if (ProtoFileText.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ProtoFileText);
      }
      if (ConvertToSnakeCase != false) {
        size += 1 + 1;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(KickstartSolutionRequest other) {
      if (other == null) {
        return;
      }
      if (other.DatabaseType != 0) {
        DatabaseType = other.DatabaseType;
      }
      if (other.GenerateDatabaseProject != false) {
        GenerateDatabaseProject = other.GenerateDatabaseProject;
      }
      if (other.GenerateDataLayerProject != false) {
        GenerateDataLayerProject = other.GenerateDataLayerProject;
      }
      if (other.GenerateGrpcServiceProject != false) {
        GenerateGrpcServiceProject = other.GenerateGrpcServiceProject;
      }
      if (other.GenerateGrpcUnitTestProject != false) {
        GenerateGrpcUnitTestProject = other.GenerateGrpcUnitTestProject;
      }
      if (other.GenerateGrpcClientProject != false) {
        GenerateGrpcClientProject = other.GenerateGrpcClientProject;
      }
      if (other.GenerateWebAppProject != false) {
        GenerateWebAppProject = other.GenerateWebAppProject;
      }
      if (other.GenerateDockerComposeProject != false) {
        GenerateDockerComposeProject = other.GenerateDockerComposeProject;
      }
      if (other.CompanyName.Length != 0) {
        CompanyName = other.CompanyName;
      }
      if (other.SolutionName.Length != 0) {
        SolutionName = other.SolutionName;
      }
      if (other.ProjectName.Length != 0) {
        ProjectName = other.ProjectName;
      }
      if (other.ProtoFileText.Length != 0) {
        ProtoFileText = other.ProtoFileText;
      }
      if (other.ConvertToSnakeCase != false) {
        ConvertToSnakeCase = other.ConvertToSnakeCase;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            databaseType_ = (global::Kickstart.Services.Types.KickstartSolutionRequest.Types.DatabaseTypes) input.ReadEnum();
            break;
          }
          case 16: {
            GenerateDatabaseProject = input.ReadBool();
            break;
          }
          case 24: {
            GenerateDataLayerProject = input.ReadBool();
            break;
          }
          case 32: {
            GenerateGrpcServiceProject = input.ReadBool();
            break;
          }
          case 40: {
            GenerateGrpcUnitTestProject = input.ReadBool();
            break;
          }
          case 48: {
            GenerateGrpcClientProject = input.ReadBool();
            break;
          }
          case 56: {
            GenerateWebAppProject = input.ReadBool();
            break;
          }
          case 64: {
            GenerateDockerComposeProject = input.ReadBool();
            break;
          }
          case 74: {
            CompanyName = input.ReadString();
            break;
          }
          case 82: {
            SolutionName = input.ReadString();
            break;
          }
          case 90: {
            ProjectName = input.ReadString();
            break;
          }
          case 98: {
            ProtoFileText = input.ReadString();
            break;
          }
          case 104: {
            ConvertToSnakeCase = input.ReadBool();
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the KickstartSolutionRequest message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      public enum DatabaseTypes {
        [pbr::OriginalName("Unknown")] Unknown = 0,
        [pbr::OriginalName("Postgres")] Postgres = 1,
        [pbr::OriginalName("SqlServer")] SqlServer = 2,
        [pbr::OriginalName("MySql")] MySql = 3,
        [pbr::OriginalName("Kinesis")] Kinesis = 4,
        [pbr::OriginalName("Kafka")] Kafka = 5,
      }

    }
    #endregion

  }

  public sealed partial class KickstartSolutionResponse : pb::IMessage<KickstartSolutionResponse> {
    private static readonly pb::MessageParser<KickstartSolutionResponse> _parser = new pb::MessageParser<KickstartSolutionResponse>(() => new KickstartSolutionResponse());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<KickstartSolutionResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Kickstart.Services.Types.KickstartServiceReflection.Descriptor.MessageTypes[6]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public KickstartSolutionResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public KickstartSolutionResponse(KickstartSolutionResponse other) : this() {
      succeeded_ = other.succeeded_;
      errorMessage_ = other.errorMessage_;
      generatedFilesBase64_ = other.generatedFilesBase64_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public KickstartSolutionResponse Clone() {
      return new KickstartSolutionResponse(this);
    }

    /// <summary>Field number for the "Succeeded" field.</summary>
    public const int SucceededFieldNumber = 1;
    private bool succeeded_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Succeeded {
      get { return succeeded_; }
      set {
        succeeded_ = value;
      }
    }

    /// <summary>Field number for the "ErrorMessage" field.</summary>
    public const int ErrorMessageFieldNumber = 2;
    private string errorMessage_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ErrorMessage {
      get { return errorMessage_; }
      set {
        errorMessage_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "GeneratedFilesBase64" field.</summary>
    public const int GeneratedFilesBase64FieldNumber = 3;
    private string generatedFilesBase64_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string GeneratedFilesBase64 {
      get { return generatedFilesBase64_; }
      set {
        generatedFilesBase64_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as KickstartSolutionResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(KickstartSolutionResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Succeeded != other.Succeeded) return false;
      if (ErrorMessage != other.ErrorMessage) return false;
      if (GeneratedFilesBase64 != other.GeneratedFilesBase64) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Succeeded != false) hash ^= Succeeded.GetHashCode();
      if (ErrorMessage.Length != 0) hash ^= ErrorMessage.GetHashCode();
      if (GeneratedFilesBase64.Length != 0) hash ^= GeneratedFilesBase64.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Succeeded != false) {
        output.WriteRawTag(8);
        output.WriteBool(Succeeded);
      }
      if (ErrorMessage.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(ErrorMessage);
      }
      if (GeneratedFilesBase64.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(GeneratedFilesBase64);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Succeeded != false) {
        size += 1 + 1;
      }
      if (ErrorMessage.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ErrorMessage);
      }
      if (GeneratedFilesBase64.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(GeneratedFilesBase64);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(KickstartSolutionResponse other) {
      if (other == null) {
        return;
      }
      if (other.Succeeded != false) {
        Succeeded = other.Succeeded;
      }
      if (other.ErrorMessage.Length != 0) {
        ErrorMessage = other.ErrorMessage;
      }
      if (other.GeneratedFilesBase64.Length != 0) {
        GeneratedFilesBase64 = other.GeneratedFilesBase64;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Succeeded = input.ReadBool();
            break;
          }
          case 18: {
            ErrorMessage = input.ReadString();
            break;
          }
          case 26: {
            GeneratedFilesBase64 = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class ConvertDDLRequest : pb::IMessage<ConvertDDLRequest> {
    private static readonly pb::MessageParser<ConvertDDLRequest> _parser = new pb::MessageParser<ConvertDDLRequest>(() => new ConvertDDLRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ConvertDDLRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Kickstart.Services.Types.KickstartServiceReflection.Descriptor.MessageTypes[7]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ConvertDDLRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ConvertDDLRequest(ConvertDDLRequest other) : this() {
      databaseType_ = other.databaseType_;
      convertToSnakeCase_ = other.convertToSnakeCase_;
      unconvertedTableDDL_ = other.unconvertedTableDDL_;
      unconvertedTableTypeDDL_ = other.unconvertedTableTypeDDL_;
      unconvertedStoredProcedureDDL_ = other.unconvertedStoredProcedureDDL_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ConvertDDLRequest Clone() {
      return new ConvertDDLRequest(this);
    }

    /// <summary>Field number for the "DatabaseType" field.</summary>
    public const int DatabaseTypeFieldNumber = 1;
    private global::Kickstart.Services.Types.DatabaseTypes databaseType_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Kickstart.Services.Types.DatabaseTypes DatabaseType {
      get { return databaseType_; }
      set {
        databaseType_ = value;
      }
    }

    /// <summary>Field number for the "ConvertToSnakeCase" field.</summary>
    public const int ConvertToSnakeCaseFieldNumber = 2;
    private bool convertToSnakeCase_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool ConvertToSnakeCase {
      get { return convertToSnakeCase_; }
      set {
        convertToSnakeCase_ = value;
      }
    }

    /// <summary>Field number for the "UnconvertedTableDDL" field.</summary>
    public const int UnconvertedTableDDLFieldNumber = 3;
    private string unconvertedTableDDL_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string UnconvertedTableDDL {
      get { return unconvertedTableDDL_; }
      set {
        unconvertedTableDDL_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "UnconvertedTableTypeDDL" field.</summary>
    public const int UnconvertedTableTypeDDLFieldNumber = 4;
    private string unconvertedTableTypeDDL_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string UnconvertedTableTypeDDL {
      get { return unconvertedTableTypeDDL_; }
      set {
        unconvertedTableTypeDDL_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "UnconvertedStoredProcedureDDL" field.</summary>
    public const int UnconvertedStoredProcedureDDLFieldNumber = 5;
    private string unconvertedStoredProcedureDDL_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string UnconvertedStoredProcedureDDL {
      get { return unconvertedStoredProcedureDDL_; }
      set {
        unconvertedStoredProcedureDDL_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ConvertDDLRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ConvertDDLRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (DatabaseType != other.DatabaseType) return false;
      if (ConvertToSnakeCase != other.ConvertToSnakeCase) return false;
      if (UnconvertedTableDDL != other.UnconvertedTableDDL) return false;
      if (UnconvertedTableTypeDDL != other.UnconvertedTableTypeDDL) return false;
      if (UnconvertedStoredProcedureDDL != other.UnconvertedStoredProcedureDDL) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (DatabaseType != 0) hash ^= DatabaseType.GetHashCode();
      if (ConvertToSnakeCase != false) hash ^= ConvertToSnakeCase.GetHashCode();
      if (UnconvertedTableDDL.Length != 0) hash ^= UnconvertedTableDDL.GetHashCode();
      if (UnconvertedTableTypeDDL.Length != 0) hash ^= UnconvertedTableTypeDDL.GetHashCode();
      if (UnconvertedStoredProcedureDDL.Length != 0) hash ^= UnconvertedStoredProcedureDDL.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (DatabaseType != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) DatabaseType);
      }
      if (ConvertToSnakeCase != false) {
        output.WriteRawTag(16);
        output.WriteBool(ConvertToSnakeCase);
      }
      if (UnconvertedTableDDL.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(UnconvertedTableDDL);
      }
      if (UnconvertedTableTypeDDL.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(UnconvertedTableTypeDDL);
      }
      if (UnconvertedStoredProcedureDDL.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(UnconvertedStoredProcedureDDL);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (DatabaseType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) DatabaseType);
      }
      if (ConvertToSnakeCase != false) {
        size += 1 + 1;
      }
      if (UnconvertedTableDDL.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(UnconvertedTableDDL);
      }
      if (UnconvertedTableTypeDDL.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(UnconvertedTableTypeDDL);
      }
      if (UnconvertedStoredProcedureDDL.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(UnconvertedStoredProcedureDDL);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ConvertDDLRequest other) {
      if (other == null) {
        return;
      }
      if (other.DatabaseType != 0) {
        DatabaseType = other.DatabaseType;
      }
      if (other.ConvertToSnakeCase != false) {
        ConvertToSnakeCase = other.ConvertToSnakeCase;
      }
      if (other.UnconvertedTableDDL.Length != 0) {
        UnconvertedTableDDL = other.UnconvertedTableDDL;
      }
      if (other.UnconvertedTableTypeDDL.Length != 0) {
        UnconvertedTableTypeDDL = other.UnconvertedTableTypeDDL;
      }
      if (other.UnconvertedStoredProcedureDDL.Length != 0) {
        UnconvertedStoredProcedureDDL = other.UnconvertedStoredProcedureDDL;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            databaseType_ = (global::Kickstart.Services.Types.DatabaseTypes) input.ReadEnum();
            break;
          }
          case 16: {
            ConvertToSnakeCase = input.ReadBool();
            break;
          }
          case 26: {
            UnconvertedTableDDL = input.ReadString();
            break;
          }
          case 34: {
            UnconvertedTableTypeDDL = input.ReadString();
            break;
          }
          case 42: {
            UnconvertedStoredProcedureDDL = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class ConvertDDLResponse : pb::IMessage<ConvertDDLResponse> {
    private static readonly pb::MessageParser<ConvertDDLResponse> _parser = new pb::MessageParser<ConvertDDLResponse>(() => new ConvertDDLResponse());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ConvertDDLResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Kickstart.Services.Types.KickstartServiceReflection.Descriptor.MessageTypes[8]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ConvertDDLResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ConvertDDLResponse(ConvertDDLResponse other) : this() {
      convertedTableDDL_ = other.convertedTableDDL_;
      convertedTableTypeDDL_ = other.convertedTableTypeDDL_;
      convertedStoredProcedureDDL_ = other.convertedStoredProcedureDDL_;
      convertedDmsJson_ = other.convertedDmsJson_;
      zipAsBase64_ = other.zipAsBase64_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ConvertDDLResponse Clone() {
      return new ConvertDDLResponse(this);
    }

    /// <summary>Field number for the "ConvertedTableDDL" field.</summary>
    public const int ConvertedTableDDLFieldNumber = 1;
    private string convertedTableDDL_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ConvertedTableDDL {
      get { return convertedTableDDL_; }
      set {
        convertedTableDDL_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "ConvertedTableTypeDDL" field.</summary>
    public const int ConvertedTableTypeDDLFieldNumber = 2;
    private string convertedTableTypeDDL_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ConvertedTableTypeDDL {
      get { return convertedTableTypeDDL_; }
      set {
        convertedTableTypeDDL_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "ConvertedStoredProcedureDDL" field.</summary>
    public const int ConvertedStoredProcedureDDLFieldNumber = 3;
    private string convertedStoredProcedureDDL_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ConvertedStoredProcedureDDL {
      get { return convertedStoredProcedureDDL_; }
      set {
        convertedStoredProcedureDDL_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "ConvertedDmsJson" field.</summary>
    public const int ConvertedDmsJsonFieldNumber = 4;
    private string convertedDmsJson_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ConvertedDmsJson {
      get { return convertedDmsJson_; }
      set {
        convertedDmsJson_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "ZipAsBase64" field.</summary>
    public const int ZipAsBase64FieldNumber = 5;
    private string zipAsBase64_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ZipAsBase64 {
      get { return zipAsBase64_; }
      set {
        zipAsBase64_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ConvertDDLResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ConvertDDLResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ConvertedTableDDL != other.ConvertedTableDDL) return false;
      if (ConvertedTableTypeDDL != other.ConvertedTableTypeDDL) return false;
      if (ConvertedStoredProcedureDDL != other.ConvertedStoredProcedureDDL) return false;
      if (ConvertedDmsJson != other.ConvertedDmsJson) return false;
      if (ZipAsBase64 != other.ZipAsBase64) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (ConvertedTableDDL.Length != 0) hash ^= ConvertedTableDDL.GetHashCode();
      if (ConvertedTableTypeDDL.Length != 0) hash ^= ConvertedTableTypeDDL.GetHashCode();
      if (ConvertedStoredProcedureDDL.Length != 0) hash ^= ConvertedStoredProcedureDDL.GetHashCode();
      if (ConvertedDmsJson.Length != 0) hash ^= ConvertedDmsJson.GetHashCode();
      if (ZipAsBase64.Length != 0) hash ^= ZipAsBase64.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ConvertedTableDDL.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(ConvertedTableDDL);
      }
      if (ConvertedTableTypeDDL.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(ConvertedTableTypeDDL);
      }
      if (ConvertedStoredProcedureDDL.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(ConvertedStoredProcedureDDL);
      }
      if (ConvertedDmsJson.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(ConvertedDmsJson);
      }
      if (ZipAsBase64.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(ZipAsBase64);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ConvertedTableDDL.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ConvertedTableDDL);
      }
      if (ConvertedTableTypeDDL.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ConvertedTableTypeDDL);
      }
      if (ConvertedStoredProcedureDDL.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ConvertedStoredProcedureDDL);
      }
      if (ConvertedDmsJson.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ConvertedDmsJson);
      }
      if (ZipAsBase64.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ZipAsBase64);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ConvertDDLResponse other) {
      if (other == null) {
        return;
      }
      if (other.ConvertedTableDDL.Length != 0) {
        ConvertedTableDDL = other.ConvertedTableDDL;
      }
      if (other.ConvertedTableTypeDDL.Length != 0) {
        ConvertedTableTypeDDL = other.ConvertedTableTypeDDL;
      }
      if (other.ConvertedStoredProcedureDDL.Length != 0) {
        ConvertedStoredProcedureDDL = other.ConvertedStoredProcedureDDL;
      }
      if (other.ConvertedDmsJson.Length != 0) {
        ConvertedDmsJson = other.ConvertedDmsJson;
      }
      if (other.ZipAsBase64.Length != 0) {
        ZipAsBase64 = other.ZipAsBase64;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            ConvertedTableDDL = input.ReadString();
            break;
          }
          case 18: {
            ConvertedTableTypeDDL = input.ReadString();
            break;
          }
          case 26: {
            ConvertedStoredProcedureDDL = input.ReadString();
            break;
          }
          case 34: {
            ConvertedDmsJson = input.ReadString();
            break;
          }
          case 42: {
            ZipAsBase64 = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class SplitDDLRequest : pb::IMessage<SplitDDLRequest> {
    private static readonly pb::MessageParser<SplitDDLRequest> _parser = new pb::MessageParser<SplitDDLRequest>(() => new SplitDDLRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SplitDDLRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Kickstart.Services.Types.KickstartServiceReflection.Descriptor.MessageTypes[9]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SplitDDLRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SplitDDLRequest(SplitDDLRequest other) : this() {
      databaseType_ = other.databaseType_;
      unSplitTableDDL_ = other.unSplitTableDDL_;
      unSplitTableTypeDDL_ = other.unSplitTableTypeDDL_;
      unSplitViewDDL_ = other.unSplitViewDDL_;
      unSplitFunctionDDL_ = other.unSplitFunctionDDL_;
      unSplitStoredProcedureDDL_ = other.unSplitStoredProcedureDDL_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SplitDDLRequest Clone() {
      return new SplitDDLRequest(this);
    }

    /// <summary>Field number for the "DatabaseType" field.</summary>
    public const int DatabaseTypeFieldNumber = 1;
    private global::Kickstart.Services.Types.DatabaseTypes databaseType_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Kickstart.Services.Types.DatabaseTypes DatabaseType {
      get { return databaseType_; }
      set {
        databaseType_ = value;
      }
    }

    /// <summary>Field number for the "UnSplitTableDDL" field.</summary>
    public const int UnSplitTableDDLFieldNumber = 2;
    private string unSplitTableDDL_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string UnSplitTableDDL {
      get { return unSplitTableDDL_; }
      set {
        unSplitTableDDL_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "UnSplitTableTypeDDL" field.</summary>
    public const int UnSplitTableTypeDDLFieldNumber = 3;
    private string unSplitTableTypeDDL_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string UnSplitTableTypeDDL {
      get { return unSplitTableTypeDDL_; }
      set {
        unSplitTableTypeDDL_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "UnSplitViewDDL" field.</summary>
    public const int UnSplitViewDDLFieldNumber = 4;
    private string unSplitViewDDL_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string UnSplitViewDDL {
      get { return unSplitViewDDL_; }
      set {
        unSplitViewDDL_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "UnSplitFunctionDDL" field.</summary>
    public const int UnSplitFunctionDDLFieldNumber = 5;
    private string unSplitFunctionDDL_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string UnSplitFunctionDDL {
      get { return unSplitFunctionDDL_; }
      set {
        unSplitFunctionDDL_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "UnSplitStoredProcedureDDL" field.</summary>
    public const int UnSplitStoredProcedureDDLFieldNumber = 6;
    private string unSplitStoredProcedureDDL_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string UnSplitStoredProcedureDDL {
      get { return unSplitStoredProcedureDDL_; }
      set {
        unSplitStoredProcedureDDL_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SplitDDLRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SplitDDLRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (DatabaseType != other.DatabaseType) return false;
      if (UnSplitTableDDL != other.UnSplitTableDDL) return false;
      if (UnSplitTableTypeDDL != other.UnSplitTableTypeDDL) return false;
      if (UnSplitViewDDL != other.UnSplitViewDDL) return false;
      if (UnSplitFunctionDDL != other.UnSplitFunctionDDL) return false;
      if (UnSplitStoredProcedureDDL != other.UnSplitStoredProcedureDDL) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (DatabaseType != 0) hash ^= DatabaseType.GetHashCode();
      if (UnSplitTableDDL.Length != 0) hash ^= UnSplitTableDDL.GetHashCode();
      if (UnSplitTableTypeDDL.Length != 0) hash ^= UnSplitTableTypeDDL.GetHashCode();
      if (UnSplitViewDDL.Length != 0) hash ^= UnSplitViewDDL.GetHashCode();
      if (UnSplitFunctionDDL.Length != 0) hash ^= UnSplitFunctionDDL.GetHashCode();
      if (UnSplitStoredProcedureDDL.Length != 0) hash ^= UnSplitStoredProcedureDDL.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (DatabaseType != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) DatabaseType);
      }
      if (UnSplitTableDDL.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(UnSplitTableDDL);
      }
      if (UnSplitTableTypeDDL.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(UnSplitTableTypeDDL);
      }
      if (UnSplitViewDDL.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(UnSplitViewDDL);
      }
      if (UnSplitFunctionDDL.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(UnSplitFunctionDDL);
      }
      if (UnSplitStoredProcedureDDL.Length != 0) {
        output.WriteRawTag(50);
        output.WriteString(UnSplitStoredProcedureDDL);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (DatabaseType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) DatabaseType);
      }
      if (UnSplitTableDDL.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(UnSplitTableDDL);
      }
      if (UnSplitTableTypeDDL.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(UnSplitTableTypeDDL);
      }
      if (UnSplitViewDDL.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(UnSplitViewDDL);
      }
      if (UnSplitFunctionDDL.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(UnSplitFunctionDDL);
      }
      if (UnSplitStoredProcedureDDL.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(UnSplitStoredProcedureDDL);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SplitDDLRequest other) {
      if (other == null) {
        return;
      }
      if (other.DatabaseType != 0) {
        DatabaseType = other.DatabaseType;
      }
      if (other.UnSplitTableDDL.Length != 0) {
        UnSplitTableDDL = other.UnSplitTableDDL;
      }
      if (other.UnSplitTableTypeDDL.Length != 0) {
        UnSplitTableTypeDDL = other.UnSplitTableTypeDDL;
      }
      if (other.UnSplitViewDDL.Length != 0) {
        UnSplitViewDDL = other.UnSplitViewDDL;
      }
      if (other.UnSplitFunctionDDL.Length != 0) {
        UnSplitFunctionDDL = other.UnSplitFunctionDDL;
      }
      if (other.UnSplitStoredProcedureDDL.Length != 0) {
        UnSplitStoredProcedureDDL = other.UnSplitStoredProcedureDDL;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            databaseType_ = (global::Kickstart.Services.Types.DatabaseTypes) input.ReadEnum();
            break;
          }
          case 18: {
            UnSplitTableDDL = input.ReadString();
            break;
          }
          case 26: {
            UnSplitTableTypeDDL = input.ReadString();
            break;
          }
          case 34: {
            UnSplitViewDDL = input.ReadString();
            break;
          }
          case 42: {
            UnSplitFunctionDDL = input.ReadString();
            break;
          }
          case 50: {
            UnSplitStoredProcedureDDL = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class SplitDDLResponse : pb::IMessage<SplitDDLResponse> {
    private static readonly pb::MessageParser<SplitDDLResponse> _parser = new pb::MessageParser<SplitDDLResponse>(() => new SplitDDLResponse());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SplitDDLResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Kickstart.Services.Types.KickstartServiceReflection.Descriptor.MessageTypes[10]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SplitDDLResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SplitDDLResponse(SplitDDLResponse other) : this() {
      zipAsBase64_ = other.zipAsBase64_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SplitDDLResponse Clone() {
      return new SplitDDLResponse(this);
    }

    /// <summary>Field number for the "ZipAsBase64" field.</summary>
    public const int ZipAsBase64FieldNumber = 1;
    private string zipAsBase64_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ZipAsBase64 {
      get { return zipAsBase64_; }
      set {
        zipAsBase64_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SplitDDLResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SplitDDLResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ZipAsBase64 != other.ZipAsBase64) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (ZipAsBase64.Length != 0) hash ^= ZipAsBase64.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ZipAsBase64.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(ZipAsBase64);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ZipAsBase64.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ZipAsBase64);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SplitDDLResponse other) {
      if (other == null) {
        return;
      }
      if (other.ZipAsBase64.Length != 0) {
        ZipAsBase64 = other.ZipAsBase64;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            ZipAsBase64 = input.ReadString();
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
